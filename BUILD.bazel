load(
    "//ign_bazel:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "//ign_bazel:generate_include_header.bzl",
    "generate_include_header",
)
load(
    "//ign_bazel:generate_file.bzl",
    "generate_file",
)

package(default_visibility = ["//visibility:public"])

PROJECT_NAME = "ignition-sensors"
PROJECT_MAJOR = 4
PROJECT_MINOR = 0
PROJECT_PATCH = 0
IGN_DESIGNATION = "/tmp"
CMAKE_INSTALL_PREFIX = "/tmp"
IGN_LIB_INSTALL_DIR = "/tmp"
IGN_DESIGNATION_CAP = 1
IGN_SENSORS_PLUGIN_PATH = "/tmp"
PROJECT_LIBRARY_TARGET_NAME = "name"

# Generates config.hh based on the version numbers in CMake code.
cmake_configure_file(
    name = "config",
    src = "include/ignition/sensors/config.hh.in",
    out = "include/ignition/sensors/config.hh",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        "PROJECT_VERSION_MAJOR=%d" % (PROJECT_MAJOR),
        "PROJECT_MAJOR_VERSION=%d" % (PROJECT_MAJOR),
        "PROJECT_MINOR_VERSION=%d" % (PROJECT_MINOR),
        "PROJECT_PATCH_VERSION=%d" % (PROJECT_PATCH),
        "PROJECT_VERSION_PATCH=%d" % (PROJECT_PATCH),
        "PROJECT_VERSION_MAJOR=%d" % (PROJECT_MAJOR),
        "PROJECT_VERSION_MINOR=%d" % (PROJECT_MINOR),
        "PROJECT_VERSION=%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR),
        "PROJECT_VERSION_FULL=%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),  # noqa
        "PROJECT_NAME_NO_VERSION=%s" % (PROJECT_NAME),
        "PROJECT_NAME=%s" % (PROJECT_NAME),
        "IGN_DESIGNATION=%s" % (IGN_DESIGNATION),
        "CMAKE_INSTALL_PREFIX=%s" % (CMAKE_INSTALL_PREFIX),
        "IGN_LIB_INSTALL_DIR=%s" % (IGN_LIB_INSTALL_DIR),
        "IGN_DESIGNATION_CAP=%d" % (IGN_DESIGNATION_CAP),
        "IGN_SENSORS_PLUGIN_PATH=%s" % (IGN_SENSORS_PLUGIN_PATH),
        "PROJECT_LIBRARY_TARGET_NAME=%s" % (PROJECT_LIBRARY_TARGET_NAME),
    ],
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_VISIBLE
#undef IGNITION_SENSORS_VISIBLE
#endif
#define IGNITION_SENSORS_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/rendering/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_RENDERING_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_RENDERING_VISIBLE
#undef IGNITION_SENSORS_RENDERING_VISIBLE
#endif
#define IGNITION_SENSORS_RENDERING_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/imu/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_IMU_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_IMU_VISIBLE
#undef IGNITION_SENSORS_IMU_VISIBLE
#endif
#define IGNITION_SENSORS_IMU_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/air_pressure/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_AIR_PRESSURE_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_AIR_PRESSURE_VISIBLE
#undef IGNITION_SENSORS_AIR_PRESSURE_VISIBLE
#endif
#define IGNITION_SENSORS_AIR_PRESSURE_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/lidar/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_LIDAR_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_LIDAR_VISIBLE
#undef IGNITION_SENSORS_LIDAR_VISIBLE
#endif
#define IGNITION_SENSORS_LIDAR_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/depth_camera/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_DEPTH_CAMERA_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_DEPTH_CAMERA_VISIBLE
#undef IGNITION_SENSORS_DEPTH_CAMERA_VISIBLE
#endif
#define IGNITION_SENSORS_DEPTH_CAMERA_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/logical_camera/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_LOGICAL_CAMERA_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_LOGICAL_CAMERA_VISIBLE
#undef IGNITION_SENSORS_LOGICAL_CAMERA_VISIBLE
#endif
#define IGNITION_SENSORS_LOGICAL_CAMERA_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/thermal_camera/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_THERMAL_CAMERA_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_THERMAL_CAMERA_VISIBLE
#undef IGNITION_SENSORS_THERMAL_CAMERA_VISIBLE
#endif
#define IGNITION_SENSORS_THERMAL_CAMERA_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/rgbd_camera/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_RGBD_CAMERA_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_RGBD_CAMERA_VISIBLE
#undef IGNITION_SENSORS_RGBD_CAMERA_VISIBLE
#endif
#define IGNITION_SENSORS_RGBD_CAMERA_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/gpu_lidar/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_IMU_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_GPU_LIDAR_VISIBLE
#undef IGNITION_SENSORS_GPU_LIDAR_VISIBLE
#endif
#define IGNITION_SENSORS_GPU_LIDAR_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/camera/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_CAMERA_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_CAMERA_VISIBLE
#undef IGNITION_SENSORS_CAMERA_VISIBLE
#endif
#define IGNITION_SENSORS_CAMERA_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/altimeter/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_ALTIMETER_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_ALTIMETER_VISIBLE
#undef IGNITION_SENSORS_ALTIMETER_VISIBLE
#endif
#define IGNITION_SENSORS_ALTIMETER_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/sensors/magnetometer/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_SENSORS_MAGNETOMETER_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_SENSORS_MAGNETOMETER_VISIBLE
#undef IGNITION_SENSORS_MAGNETOMETER_VISIBLE
#endif
#define IGNITION_SENSORS_MAGNETOMETER_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

public_headers_no_gen = [
    "include/ignition/sensors/AirPressureSensor.hh",
    "include/ignition/sensors/AltimeterSensor.hh",
    "include/ignition/sensors/CameraSensor.hh",
    "include/ignition/sensors/DepthCameraSensor.hh",
    "include/ignition/sensors/GaussianNoiseModel.hh",
    "include/ignition/sensors/GpuLidarSensor.hh",
    "include/ignition/sensors/ImageGaussianNoiseModel.hh",
    "include/ignition/sensors/ImageNoise.hh",
    "include/ignition/sensors/ImuSensor.hh",
    "include/ignition/sensors/Lidar.hh",
    "include/ignition/sensors/LogicalCameraSensor.hh",
    "include/ignition/sensors/MagnetometerSensor.hh",
    "include/ignition/sensors/Manager.hh",
    "include/ignition/sensors/Noise.hh",
    "include/ignition/sensors/RenderingEvents.hh",
    "include/ignition/sensors/RenderingSensor.hh",
    "include/ignition/sensors/RgbdCameraSensor.hh",
    "include/ignition/sensors/Sensor.hh",
    "include/ignition/sensors/SensorFactory.hh",
    "include/ignition/sensors/SensorTypes.hh",
    "include/ignition/sensors/ThermalCameraSensor.hh",
]

private_headers = [
    "src/PointCloudUtil.hh",
]

sensors = [
    "AirPressureSensor",
    "AltimeterSensor",
    "CameraSensor",
    "DepthCameraSensor",
    "GpuLidarSensor",
    "ImageNoise",
    "ImuSensor",
    "Lidar",
    "LogicalCameraSensor",
    "MagnetometerSensor",
    "RenderingSensor",
    "RgbdCameraSensor",
    "ThermalCameraSensor",
]

sensor_sources = [
    "src/AirPressureSensor.cc",
    "src/AltimeterSensor.cc",
    "src/CameraSensor.cc",
    "src/DepthCameraSensor.cc",
    "src/GpuLidarSensor.cc",
    "src/ImuSensor.cc",
    "src/Lidar.cc",
    "src/LogicalCameraSensor.cc",
    "src/MagnetometerSensor.cc",
    "src/RenderingSensor.cc",
    "src/RgbdCameraSensor.cc",
    "src/ThermalCameraSensor.cc",
]

sources = [
    "src/GaussianNoiseModel.cc",
    "src/ImageGaussianNoiseModel.cc",
    "src/ImageNoise.cc",
    "src/Manager.cc",
    "src/Noise.cc",
    "src/PointCloudUtil.cc",
    "src/RenderingEvents.cc",
    "src/Sensor.cc",
    "src/SensorFactory.cc",
    "src/SensorTypes.cc",
]

test_sources = [
    "src/Camera_TEST.cc",
    "src/ImuSensor_TEST.cc",
    "src/Lidar_TEST.cc",
    "src/Manager_TEST.cc",
    "src/Noise_TEST.cc",
    "src/Sensor_TEST.cc",
]

generate_include_header(
    name = "sensorshh_genrule",
    out = "include/ignition/sensors.hh",
    hdrs = public_headers_no_gen + [
        "include/ignition/sensors/config.hh",
        "include/ignition/sensors/Export.hh",
        "include/ignition/sensors/imu/Export.hh",
        "include/ignition/sensors/air_pressure/Export.hh",
        "include/ignition/sensors/lidar/Export.hh",
        "include/ignition/sensors/depth_camera/Export.hh",
        "include/ignition/sensors/logical_camera/Export.hh",
        "include/ignition/sensors/thermal_camera/Export.hh",
        "include/ignition/sensors/rgbd_camera/Export.hh",
        "include/ignition/sensors/gpu_lidar/Export.hh",
        "include/ignition/sensors/camera/Export.hh",
        "include/ignition/sensors/altimeter/Export.hh",
        "include/ignition/sensors/magnetometer/Export.hh",
        "include/ignition/sensors/rendering/Export.hh",
    ],
)

public_headers = public_headers_no_gen + [
    "include/ignition/sensors/config.hh",
    "include/ignition/sensors/Export.hh",
    "include/ignition/sensors/imu/Export.hh",
    "include/ignition/sensors/air_pressure/Export.hh",
    "include/ignition/sensors/lidar/Export.hh",
    "include/ignition/sensors/depth_camera/Export.hh",
    "include/ignition/sensors/logical_camera/Export.hh",
    "include/ignition/sensors/thermal_camera/Export.hh",
    "include/ignition/sensors/rgbd_camera/Export.hh",
    "include/ignition/sensors/gpu_lidar/Export.hh",
    "include/ignition/sensors/camera/Export.hh",
    "include/ignition/sensors/altimeter/Export.hh",
    "include/ignition/sensors/magnetometer/Export.hh",
    "include/ignition/sensors/rendering/Export.hh",
    "include/ignition/sensors.hh",
]

cc_binary(
    name = "libignition_sensors.so",
    srcs = sources + private_headers + public_headers,
    includes = ["include"],
    linkopts = ["-Wl,-soname,libignition_sensors.so"],
    linkshared = True,
    visibility = [],
    deps = [
        "//ign_common/events:events",
        "//ign_common/graphics:graphics",
        "//ign_common/profiler:profiler",
        "//ign_common",
        "//ign_rendering",
        "//ign_transport",
        "//ign_math",
        "//ign_msgs",
        "//sdformat",
        "//ign_bazel:utilities",
        "//ign_plugin/loader:loader",
        "//ign_plugin/core:ign_plugin",
    ],
)

cc_library(
    name = "ign_sensors",
    srcs = ["libignition_sensors.so"],
    hdrs = public_headers,
    includes = ["include"],
    visibility = ["//visibility:public"],
)

# Need to build sensors individually due to the multiple definition error - 
# There's a double inclusion with ign-common-graphics
[cc_library(
    name = sensor,
    srcs = ["src/%s.cc" % sensor] + private_headers,
    hdrs = ["include/ignition/sensors/%s.hh" % sensor],
    deps = [
        "//ign_common/events:events",
        "//ign_common/graphics:graphics",
        "//ign_common/profiler:profiler",
        "//ign_common",
        "//ign_rendering",
        "//ign_transport",
        "//ign_math",
        "//ign_msgs",
        "//ign_sensors",
        "//sdformat",
        "//ign_bazel:utilities",
        "//ign_plugin/loader:loader",
        "//ign_plugin/core:ign_plugin",
    ],
) for sensor in sensors]

[cc_test(
    name = src.replace("/", "_").replace(".cc", "").replace("src_", ""),
    srcs = [src],
    deps = [
        "//ign_common/events:events",
        "//ign_common/graphics:graphics",
        "//ign_common/profiler:profiler",
        "//ign_common",
        "//ign_rendering",
        "//ign_transport",
        "//ign_math",
        "//ign_msgs",
        "//ign_sensors",
        "//ign_sensors:AirPressureSensor",
        "//ign_sensors:AltimeterSensor",
        "//ign_sensors:CameraSensor",
        "//ign_sensors:DepthCameraSensor",
        "//ign_sensors:GpuLidarSensor",
        "//ign_sensors:ImageNoise",
        "//ign_sensors:ImuSensor",
        "//ign_sensors:Lidar",
        "//ign_sensors:LogicalCameraSensor",
        "//ign_sensors:MagnetometerSensor",
        "//ign_sensors:RenderingSensor",
        "//ign_sensors:RgbdCameraSensor",
        "//ign_sensors:ThermalCameraSensor",
        "//sdformat",
        "//ign_bazel:utilities",
        "//ign_plugin/loader:loader",
        "//ign_plugin/core:ign_plugin",
        "@gtest//:gtest",
        "@gtest//:gtest_main",
    ],
) for src in test_sources]
